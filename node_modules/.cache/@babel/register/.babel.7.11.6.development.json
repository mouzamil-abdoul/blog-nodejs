{
  "{\"sourceRoot\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"filename\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\md-seed-config.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\IIM\\GITHUB\\blog-nodejs",
      "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\md-seed-config.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\IIM\\GITHUB\\blog-nodejs",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\IIM\\GITHUB\\blog-nodejs\\md-seed-config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\md-seed-config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\",
        "sourceFileName": "md-seed-config.js"
      }
    },
    "ast": null,
    "code": "const mongoose = require('mongoose');\n\nconst PostSeeder = require('./src/db/seed/posts.seeder');\n\nconst mongoURL = process.env.MONGO_URL || 'mongodb://localhost/mon-blog';\n/**\n * Seeders List\n * order is important\n * @type {Object}\n */\n\nconst seedersList = {\n  PostSeeder\n};\n/**\n * Connect to mongodb implementation\n * @return {Promise}\n */\n\nconst connect = async () => await mongoose.connect(mongoURL, {\n  useNewUrlParser: true\n});\n/**\n * Drop/Clear the database implementation\n * @return {Promise}\n */\n\n\nconst dropdb = async () => mongoose.connection.db.dropDatabase();\n\nmodule.exports = {\n  seedersList,\n  connect,\n  dropdb\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1kLXNlZWQtY29uZmlnLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsIlBvc3RTZWVkZXIiLCJtb25nb1VSTCIsInByb2Nlc3MiLCJlbnYiLCJNT05HT19VUkwiLCJzZWVkZXJzTGlzdCIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJkcm9wZGIiLCJjb25uZWN0aW9uIiwiZGIiLCJkcm9wRGF0YWJhc2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCOztBQUNBLE1BQU1DLFVBQVUsR0FBR0QsT0FBTyxDQUFDLDRCQUFELENBQTFCOztBQUVBLE1BQU1FLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQVosSUFBeUIsOEJBQTFDO0FBRUE7Ozs7OztBQUtBLE1BQU1DLFdBQVcsR0FBRztBQUNsQkwsRUFBQUE7QUFEa0IsQ0FBcEI7QUFHQTs7Ozs7QUFJQSxNQUFNTSxPQUFPLEdBQUcsWUFDZCxNQUFNUixRQUFRLENBQUNRLE9BQVQsQ0FBaUJMLFFBQWpCLEVBQTJCO0FBQy9CTSxFQUFBQSxlQUFlLEVBQUU7QUFEYyxDQUEzQixDQURSO0FBSUE7Ozs7OztBQUlBLE1BQU1DLE1BQU0sR0FBRyxZQUFZVixRQUFRLENBQUNXLFVBQVQsQ0FBb0JDLEVBQXBCLENBQXVCQyxZQUF2QixFQUEzQjs7QUFHQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZSLEVBQUFBLFdBRGU7QUFFZkMsRUFBQUEsT0FGZTtBQUdmRSxFQUFBQTtBQUhlLENBQWpCIiwic291cmNlUm9vdCI6IkQ6XFxJSU1cXEdJVEhVQlxcYmxvZy1ub2RlanNcXCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbmNvbnN0IFBvc3RTZWVkZXIgPSByZXF1aXJlKCcuL3NyYy9kYi9zZWVkL3Bvc3RzLnNlZWRlcicpXG5cbmNvbnN0IG1vbmdvVVJMID0gcHJvY2Vzcy5lbnYuTU9OR09fVVJMIHx8ICdtb25nb2RiOi8vbG9jYWxob3N0L21vbi1ibG9nJztcblxuLyoqXG4gKiBTZWVkZXJzIExpc3RcbiAqIG9yZGVyIGlzIGltcG9ydGFudFxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3Qgc2VlZGVyc0xpc3QgPSB7XG4gIFBvc3RTZWVkZXIsXG59O1xuLyoqXG4gKiBDb25uZWN0IHRvIG1vbmdvZGIgaW1wbGVtZW50YXRpb25cbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKi9cbmNvbnN0IGNvbm5lY3QgPSBhc3luYyAoKSA9PlxuICBhd2FpdCBtb25nb29zZS5jb25uZWN0KG1vbmdvVVJMLCB7XG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlXG4gIH0pO1xuLyoqXG4gKiBEcm9wL0NsZWFyIHRoZSBkYXRhYmFzZSBpbXBsZW1lbnRhdGlvblxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqL1xuY29uc3QgZHJvcGRiID0gYXN5bmMgKCkgPT4gbW9uZ29vc2UuY29ubmVjdGlvbi5kYi5kcm9wRGF0YWJhc2UoKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2VlZGVyc0xpc3QsXG4gIGNvbm5lY3QsXG4gIGRyb3BkYixcbn0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "md-seed-config.js"
      ],
      "names": [
        "mongoose",
        "require",
        "PostSeeder",
        "mongoURL",
        "process",
        "env",
        "MONGO_URL",
        "seedersList",
        "connect",
        "useNewUrlParser",
        "dropdb",
        "connection",
        "db",
        "dropDatabase",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,4BAAD,CAA1B;;AAEA,MAAME,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,8BAA1C;AAEA;;;;;;AAKA,MAAMC,WAAW,GAAG;AAClBL,EAAAA;AADkB,CAApB;AAGA;;;;;AAIA,MAAMM,OAAO,GAAG,YACd,MAAMR,QAAQ,CAACQ,OAAT,CAAiBL,QAAjB,EAA2B;AAC/BM,EAAAA,eAAe,EAAE;AADc,CAA3B,CADR;AAIA;;;;;;AAIA,MAAMC,MAAM,GAAG,YAAYV,QAAQ,CAACW,UAAT,CAAoBC,EAApB,CAAuBC,YAAvB,EAA3B;;AAGAC,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,WADe;AAEfC,EAAAA,OAFe;AAGfE,EAAAA;AAHe,CAAjB",
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\",
      "sourcesContent": [
        "const mongoose = require('mongoose');\nconst PostSeeder = require('./src/db/seed/posts.seeder')\n\nconst mongoURL = process.env.MONGO_URL || 'mongodb://localhost/mon-blog';\n\n/**\n * Seeders List\n * order is important\n * @type {Object}\n */\nconst seedersList = {\n  PostSeeder,\n};\n/**\n * Connect to mongodb implementation\n * @return {Promise}\n */\nconst connect = async () =>\n  await mongoose.connect(mongoURL, {\n    useNewUrlParser: true\n  });\n/**\n * Drop/Clear the database implementation\n * @return {Promise}\n */\nconst dropdb = async () => mongoose.connection.db.dropDatabase();\n\n\nmodule.exports = {\n  seedersList,\n  connect,\n  dropdb,\n}"
      ]
    },
    "sourceType": "module",
    "mtime": 1601398082816
  },
  "{\"sourceRoot\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\src\\\\db\\\\seed\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"filename\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\src\\\\db\\\\seed\\\\posts.seeder.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\seed\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\IIM\\GITHUB\\blog-nodejs",
      "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\seed\\posts.seeder.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\IIM\\GITHUB\\blog-nodejs",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\seed\\posts.seeder.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\seed\\posts.seeder.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\seed\\",
        "sourceFileName": "posts.seeder.js"
      }
    },
    "ast": null,
    "code": "const {\n  Seeder\n} = require('mongoose-data-seed');\n\nconst Post = require('../models/postModels');\n\nconst faker = require('faker');\n\nconst data = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    title: faker.lorem.words(3),\n    description: faker.lorem.sentence(),\n    image: faker.image.imageUrl(),\n    body: faker.lorem.paragraphs(10, \"\\n\")\n  });\n}\n\nclass PostsSeeder extends Seeder {\n  async shouldRun() {\n    return Post.countDocuments().exec().then(count => count === 0);\n  }\n\n  async run() {\n    return Post.create(data);\n  }\n\n}\n\nmodule.exports = PostsSeeder;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RzLnNlZWRlci5qcyJdLCJuYW1lcyI6WyJTZWVkZXIiLCJyZXF1aXJlIiwiUG9zdCIsImZha2VyIiwiZGF0YSIsImkiLCJwdXNoIiwidGl0bGUiLCJsb3JlbSIsIndvcmRzIiwiZGVzY3JpcHRpb24iLCJzZW50ZW5jZSIsImltYWdlIiwiaW1hZ2VVcmwiLCJib2R5IiwicGFyYWdyYXBocyIsIlBvc3RzU2VlZGVyIiwic2hvdWxkUnVuIiwiY291bnREb2N1bWVudHMiLCJleGVjIiwidGhlbiIsImNvdW50IiwicnVuIiwiY3JlYXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTTtBQUNKQSxFQUFBQTtBQURJLElBRUZDLE9BQU8sQ0FBQyxvQkFBRCxDQUZYOztBQUdBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLHNCQUFELENBQXBCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBR0EsTUFBTUcsSUFBSSxHQUFHLEVBQWI7O0FBR0EsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzNCRCxFQUFBQSxJQUFJLENBQUNFLElBQUwsQ0FBVTtBQUNSQyxJQUFBQSxLQUFLLEVBQUVKLEtBQUssQ0FBQ0ssS0FBTixDQUFZQyxLQUFaLENBQWtCLENBQWxCLENBREM7QUFFUkMsSUFBQUEsV0FBVyxFQUFFUCxLQUFLLENBQUNLLEtBQU4sQ0FBWUcsUUFBWixFQUZMO0FBR1JDLElBQUFBLEtBQUssRUFBRVQsS0FBSyxDQUFDUyxLQUFOLENBQVlDLFFBQVosRUFIQztBQUlSQyxJQUFBQSxJQUFJLEVBQUVYLEtBQUssQ0FBQ0ssS0FBTixDQUFZTyxVQUFaLENBQXVCLEVBQXZCLEVBQTJCLElBQTNCO0FBSkUsR0FBVjtBQU1EOztBQUVELE1BQU1DLFdBQU4sU0FBMEJoQixNQUExQixDQUFpQztBQUUvQixRQUFNaUIsU0FBTixHQUFrQjtBQUNoQixXQUFPZixJQUFJLENBQUNnQixjQUFMLEdBQXNCQyxJQUF0QixHQUE2QkMsSUFBN0IsQ0FBa0NDLEtBQUssSUFBSUEsS0FBSyxLQUFLLENBQXJELENBQVA7QUFDRDs7QUFFRCxRQUFNQyxHQUFOLEdBQVk7QUFDVixXQUFPcEIsSUFBSSxDQUFDcUIsTUFBTCxDQUFZbkIsSUFBWixDQUFQO0FBQ0Q7O0FBUjhCOztBQVdqQ29CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlQsV0FBakIiLCJzb3VyY2VSb290IjoiRDpcXElJTVxcR0lUSFVCXFxibG9nLW5vZGVqc1xcc3JjXFxkYlxcc2VlZFxcIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xuICBTZWVkZXJcbn0gPSByZXF1aXJlKCdtb25nb29zZS1kYXRhLXNlZWQnKTtcbmNvbnN0IFBvc3QgPSByZXF1aXJlKCcuLi9tb2RlbHMvcG9zdE1vZGVscycpO1xuY29uc3QgZmFrZXIgPSByZXF1aXJlKCdmYWtlcicpXG5cblxuY29uc3QgZGF0YSA9IFtdO1xuXG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICBkYXRhLnB1c2goe1xuICAgIHRpdGxlOiBmYWtlci5sb3JlbS53b3JkcygzKSxcbiAgICBkZXNjcmlwdGlvbjogZmFrZXIubG9yZW0uc2VudGVuY2UoKSxcbiAgICBpbWFnZTogZmFrZXIuaW1hZ2UuaW1hZ2VVcmwoKSxcbiAgICBib2R5OiBmYWtlci5sb3JlbS5wYXJhZ3JhcGhzKDEwLCBcIlxcblwiKSxcbiAgfSlcbn1cblxuY2xhc3MgUG9zdHNTZWVkZXIgZXh0ZW5kcyBTZWVkZXIge1xuXG4gIGFzeW5jIHNob3VsZFJ1bigpIHtcbiAgICByZXR1cm4gUG9zdC5jb3VudERvY3VtZW50cygpLmV4ZWMoKS50aGVuKGNvdW50ID0+IGNvdW50ID09PSAwKTtcbiAgfVxuXG4gIGFzeW5jIHJ1bigpIHtcbiAgICByZXR1cm4gUG9zdC5jcmVhdGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb3N0c1NlZWRlcjsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "posts.seeder.js"
      ],
      "names": [
        "Seeder",
        "require",
        "Post",
        "faker",
        "data",
        "i",
        "push",
        "title",
        "lorem",
        "words",
        "description",
        "sentence",
        "image",
        "imageUrl",
        "body",
        "paragraphs",
        "PostsSeeder",
        "shouldRun",
        "countDocuments",
        "exec",
        "then",
        "count",
        "run",
        "create",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AACJA,EAAAA;AADI,IAEFC,OAAO,CAAC,oBAAD,CAFX;;AAGA,MAAMC,IAAI,GAAGD,OAAO,CAAC,sBAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAGA,MAAMG,IAAI,GAAG,EAAb;;AAGA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,EAAAA,IAAI,CAACE,IAAL,CAAU;AACRC,IAAAA,KAAK,EAAEJ,KAAK,CAACK,KAAN,CAAYC,KAAZ,CAAkB,CAAlB,CADC;AAERC,IAAAA,WAAW,EAAEP,KAAK,CAACK,KAAN,CAAYG,QAAZ,EAFL;AAGRC,IAAAA,KAAK,EAAET,KAAK,CAACS,KAAN,CAAYC,QAAZ,EAHC;AAIRC,IAAAA,IAAI,EAAEX,KAAK,CAACK,KAAN,CAAYO,UAAZ,CAAuB,EAAvB,EAA2B,IAA3B;AAJE,GAAV;AAMD;;AAED,MAAMC,WAAN,SAA0BhB,MAA1B,CAAiC;AAE/B,QAAMiB,SAAN,GAAkB;AAChB,WAAOf,IAAI,CAACgB,cAAL,GAAsBC,IAAtB,GAA6BC,IAA7B,CAAkCC,KAAK,IAAIA,KAAK,KAAK,CAArD,CAAP;AACD;;AAED,QAAMC,GAAN,GAAY;AACV,WAAOpB,IAAI,CAACqB,MAAL,CAAYnB,IAAZ,CAAP;AACD;;AAR8B;;AAWjCoB,MAAM,CAACC,OAAP,GAAiBT,WAAjB",
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\seed\\",
      "sourcesContent": [
        "const {\n  Seeder\n} = require('mongoose-data-seed');\nconst Post = require('../models/postModels');\nconst faker = require('faker')\n\n\nconst data = [];\n\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    title: faker.lorem.words(3),\n    description: faker.lorem.sentence(),\n    image: faker.image.imageUrl(),\n    body: faker.lorem.paragraphs(10, \"\\n\"),\n  })\n}\n\nclass PostsSeeder extends Seeder {\n\n  async shouldRun() {\n    return Post.countDocuments().exec().then(count => count === 0);\n  }\n\n  async run() {\n    return Post.create(data);\n  }\n}\n\nmodule.exports = PostsSeeder;"
      ]
    },
    "sourceType": "module",
    "mtime": 1601398695082
  },
  "{\"sourceRoot\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\src\\\\db\\\\models\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"filename\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\src\\\\db\\\\models\\\\postModels.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\models\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\IIM\\GITHUB\\blog-nodejs",
      "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\models\\postModels.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\IIM\\GITHUB\\blog-nodejs",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\models\\postModels.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\models\\postModels.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\models\\",
        "sourceFileName": "postModels.js"
      }
    },
    "ast": null,
    "code": "const {\n  model\n} = require('mongoose');\n\nconst postSchema = require('../migrations/postSchema');\n\nconst Post = model('Post', postSchema);\nmodule.exports = Post;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RNb2RlbHMuanMiXSwibmFtZXMiOlsibW9kZWwiLCJyZXF1aXJlIiwicG9zdFNjaGVtYSIsIlBvc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQ0ZBLEVBQUFBO0FBREUsSUFFRkMsT0FBTyxDQUFDLFVBQUQsQ0FGWDs7QUFHQSxNQUFNQyxVQUFVLEdBQUdELE9BQU8sQ0FBQywwQkFBRCxDQUExQjs7QUFFQSxNQUFNRSxJQUFJLEdBQUdILEtBQUssQ0FBQyxNQUFELEVBQVNFLFVBQVQsQ0FBbEI7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixJQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcSUlNXFxHSVRIVUJcXGJsb2ctbm9kZWpzXFxzcmNcXGRiXFxtb2RlbHNcXCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtcclxuICAgIG1vZGVsXHJcbn0gPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCBwb3N0U2NoZW1hID0gcmVxdWlyZSgnLi4vbWlncmF0aW9ucy9wb3N0U2NoZW1hJyk7XHJcblxyXG5jb25zdCBQb3N0ID0gbW9kZWwoJ1Bvc3QnLCBwb3N0U2NoZW1hKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9zdDsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "postModels.js"
      ],
      "names": [
        "model",
        "require",
        "postSchema",
        "Post",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AACFA,EAAAA;AADE,IAEFC,OAAO,CAAC,UAAD,CAFX;;AAGA,MAAMC,UAAU,GAAGD,OAAO,CAAC,0BAAD,CAA1B;;AAEA,MAAME,IAAI,GAAGH,KAAK,CAAC,MAAD,EAASE,UAAT,CAAlB;AAEAE,MAAM,CAACC,OAAP,GAAiBF,IAAjB",
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\models\\",
      "sourcesContent": [
        "const {\r\n    model\r\n} = require('mongoose');\r\nconst postSchema = require('../migrations/postSchema');\r\n\r\nconst Post = model('Post', postSchema);\r\n\r\nmodule.exports = Post;"
      ]
    },
    "sourceType": "module",
    "mtime": 1601394832628
  },
  "{\"sourceRoot\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\src\\\\db\\\\migrations\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"filename\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\\\\src\\\\db\\\\migrations\\\\postSchema.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\IIM\\\\GITHUB\\\\blog-nodejs\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\migrations\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\IIM\\GITHUB\\blog-nodejs",
      "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\migrations\\postSchema.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\IIM\\GITHUB\\blog-nodejs",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\migrations\\postSchema.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\migrations\\postSchema.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\migrations\\",
        "sourceFileName": "postSchema.js"
      }
    },
    "ast": null,
    "code": "const {\n  Schema\n} = require('mongoose');\n\nconst PostSchema = new Schema({\n  title: {\n    type: String,\n    unique: true\n  },\n  description: String,\n  image: String,\n  body: String,\n  published: {\n    type: Boolean,\n    default: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = PostSchema;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RTY2hlbWEuanMiXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIlBvc3RTY2hlbWEiLCJ0aXRsZSIsInR5cGUiLCJTdHJpbmciLCJ1bmlxdWUiLCJkZXNjcmlwdGlvbiIsImltYWdlIiwiYm9keSIsInB1Ymxpc2hlZCIsIkJvb2xlYW4iLCJkZWZhdWx0IiwidGltZXN0YW1wcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07QUFDRkEsRUFBQUE7QUFERSxJQUVGQyxPQUFPLENBQUMsVUFBRCxDQUZYOztBQUlBLE1BQU1DLFVBQVUsR0FBRyxJQUFJRixNQUFKLENBQVc7QUFDMUJHLEVBQUFBLEtBQUssRUFBRTtBQUNIQyxJQUFBQSxJQUFJLEVBQUVDLE1BREg7QUFFSEMsSUFBQUEsTUFBTSxFQUFFO0FBRkwsR0FEbUI7QUFLMUJDLEVBQUFBLFdBQVcsRUFBRUYsTUFMYTtBQU0xQkcsRUFBQUEsS0FBSyxFQUFFSCxNQU5tQjtBQU8xQkksRUFBQUEsSUFBSSxFQUFFSixNQVBvQjtBQVExQkssRUFBQUEsU0FBUyxFQUFFO0FBQ1BOLElBQUFBLElBQUksRUFBRU8sT0FEQztBQUVQQyxJQUFBQSxPQUFPLEVBQUU7QUFGRjtBQVJlLENBQVgsRUFZaEI7QUFDQ0MsRUFBQUEsVUFBVSxFQUFFO0FBRGIsQ0FaZ0IsQ0FBbkI7QUFnQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmIsVUFBakIiLCJzb3VyY2VSb290IjoiRDpcXElJTVxcR0lUSFVCXFxibG9nLW5vZGVqc1xcc3JjXFxkYlxcbWlncmF0aW9uc1xcIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xyXG4gICAgU2NoZW1hXHJcbn0gPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5cclxuY29uc3QgUG9zdFNjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gICAgdGl0bGU6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgdW5pcXVlOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcsXHJcbiAgICBpbWFnZTogU3RyaW5nLFxyXG4gICAgYm9keTogU3RyaW5nLFxyXG4gICAgcHVibGlzaGVkOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgfSxcclxufSwge1xyXG4gICAgdGltZXN0YW1wczogdHJ1ZVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9zdFNjaGVtYTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "postSchema.js"
      ],
      "names": [
        "Schema",
        "require",
        "PostSchema",
        "title",
        "type",
        "String",
        "unique",
        "description",
        "image",
        "body",
        "published",
        "Boolean",
        "default",
        "timestamps",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AACFA,EAAAA;AADE,IAEFC,OAAO,CAAC,UAAD,CAFX;;AAIA,MAAMC,UAAU,GAAG,IAAIF,MAAJ,CAAW;AAC1BG,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,MAAM,EAAE;AAFL,GADmB;AAK1BC,EAAAA,WAAW,EAAEF,MALa;AAM1BG,EAAAA,KAAK,EAAEH,MANmB;AAO1BI,EAAAA,IAAI,EAAEJ,MAPoB;AAQ1BK,EAAAA,SAAS,EAAE;AACPN,IAAAA,IAAI,EAAEO,OADC;AAEPC,IAAAA,OAAO,EAAE;AAFF;AARe,CAAX,EAYhB;AACCC,EAAAA,UAAU,EAAE;AADb,CAZgB,CAAnB;AAgBAC,MAAM,CAACC,OAAP,GAAiBb,UAAjB",
      "sourceRoot": "D:\\IIM\\GITHUB\\blog-nodejs\\src\\db\\migrations\\",
      "sourcesContent": [
        "const {\r\n    Schema\r\n} = require('mongoose');\r\n\r\nconst PostSchema = new Schema({\r\n    title: {\r\n        type: String,\r\n        unique: true,\r\n    },\r\n    description: String,\r\n    image: String,\r\n    body: String,\r\n    published: {\r\n        type: Boolean,\r\n        default: true,\r\n    },\r\n}, {\r\n    timestamps: true\r\n});\r\n\r\nmodule.exports = PostSchema;"
      ]
    },
    "sourceType": "module",
    "mtime": 1601394733619
  }
}